#!/usr/bin/perl -w

require 5;
use strict;
use warnings;
use utf8;

our @header;
our @hunk;

sub clean {
    my $text = shift;
    do {
	} while ($text =~ s{\$(Id|Revision|Author|Date|Header|File|DateTime|Change): [^\$,]+ \$}{\$$1\$}g);
    return $text;
}

sub interesting_hunk {
    my @removed_lines;
    my @reinserted_lines;
    for (@hunk) {
	if (/^-(.+)/) {
	    push @removed_lines, clean($1);
	}
	elsif (@removed_lines) {
	    if (/^\+(.+)/) {
		push @reinserted_lines, clean($1);
	    }
	    else {
		if (@removed_lines != @reinserted_lines) {
		    return 1; # Not same number of lines
		}
		for my $i (0..$#removed_lines) {
		    return 1 if ($reinserted_lines[$i] ne $removed_lines[$i]);
		}
		@removed_lines = ();
		@reinserted_lines = ();
	    }
	}
	elsif (/^\+/) {
	    return 1;
	}
    }
    return 0;
}

$| = 1;
my $state = 'outside';
while (<>) {
    my $oldstate = $state;
    if ($state eq 'outside') {
	if (m|^--- |) {
	    $state = 'header';
	    @header = ($_);
	}
	else {
	    print;
	}
    }
    elsif ($state eq 'header') {
	if (m|^\@\@|) {
	    $state = 'hunk';
	    @hunk = ($_);
	}
	else {
	    push @header, $_;
	}
    }
    elsif ($state eq 'hunk') {
	if (m|^\@\@|) {
	    if (interesting_hunk) {
		print @header;
		print @hunk;
		@header = ();
	    }
	    @hunk = ($_);
	}
	elsif (m|^---|) {
	    if (interesting_hunk) {
		print @header;
		print @hunk;
		@header = ();
	    }
	    @hunk = ();
	    $state = 'header';
	}
	elsif (m|^[ +-]|) {
	    push @hunk, $_;
	}
	else {
	    if (interesting_hunk) {
		print @header;
		print @hunk;
		@header = ();
	    }
	    @hunk = ();
	    $state = 'outside';
	    print;
	}
    }
    #print "$oldstate $state : $_\n";
}

if ($state eq 'hunk') {
    if (interesting_hunk) {
	print @header;
	print @hunk;
    }
}
