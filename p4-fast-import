#!/usr/bin/perl -w

require 5;
use strict;
use warnings;
use utf8;
use Getopt::Std;
use PerforceLink qw(:p4);
use Cwd qw(abs_path);
use PerforceLink::Git;

sub validate_p4_base($) {
    my $dir = shift;
    p4_recv("dirs", $dir) or die "Perforce base directory does not exist: $dir\n";
}

my %globalopts;
getopts('dr:', \%globalopts) && @ARGV >= 1 or die "Syntax: $0 [-d] subcommand [args...]\n";
$PerforceLink::DEBUG = 1 if ($globalopts{d});
my $subcommand = shift;

if ($subcommand eq 'clone') {
    my %opts;
    getopts("o:d:m:nC:B:T:tsg:", \%opts) && @ARGV >= 1 or die "Syntax: $0 clone [-o fast-import-dump|-d git-repo] [-n] [-m max-changes] [-t] [-C commits-chkpt-interval] [-B bytes-chkpt-interval] [-T time-chkpt-interval] [-s] [-g graft-file] perforce-root-dir [branchspec...]\n";

    my $p4base = shift;
    $p4base =~ s{/(\.\.\.)?$}{};
    validate_p4_base($p4base);

    my $remotename = $globalopts{r} || 'p4';

    my $p4link;
    if ($opts{o}) {
	$p4link = PerforceLink::Git->new(output_file => $opts{o}, p4base => $p4base, remotename => $remotename);
    }
    else {
	my $git_repo_dir = $opts{d};
	if (!$git_repo_dir) {
	    ($git_repo_dir = $p4base) =~ s|.*/||;
	    $git_repo_dir .= ".git" if ($opts{n});
	    $git_repo_dir = abs_path($git_repo_dir);
	}

	if (! -d $git_repo_dir) {
	    mkdir $git_repo_dir, 0775 or die "Unable to create $git_repo_dir: $!\n";
	    my $initpid = fork;
	    die "Cannot fork: $!\n" unless (defined($initpid));
	    if ($initpid == 0) {
		chdir $git_repo_dir or die "Unable to chdir to $git_repo_dir: $!\n";
		if ($opts{n}) {
		    exec("git", "init", "--bare") or die "Unable to exec git: $!\n";
		}
		else {
		    exec("git", "init") or die "Unable to exec git: $!\n";
		}
	    }
	    waitpid($initpid, 0) or die "Unable to wait for init: $!\n";
	    my $initstatus = $?;
	    $initstatus == 0 or die "git init exited: ".PerforceLink::decode_exitstatus($initstatus)."\n";
	}
	$p4link = PerforceLink::Git->new(repo_dir => $git_repo_dir, p4base => $p4base, remotename => $remotename);
    }

    $p4link->p4base($p4base);
    $p4link->tag_changelists($opts{t});
    $p4link->fast_scan(!$opts{s});
    $p4link->checkpoint_bytes($opts{B});
    $p4link->checkpoint_commits($opts{C});
    $p4link->checkpoint_interval($opts{T});
    $p4link->max_changes($opts{m});
    $p4link->grafts($opts{g});
    my @branchspecs;
    for (@ARGV) {
	m{([^:]+)(?::([^:]+))?} or die "Invalid branch spec: $_\n";
	my($subdir_pattern, $branch_pattern) = ($1, $2);
	$branch_pattern ||= $subdir_pattern;
	push @branchspecs, [$subdir_pattern, $branch_pattern];
    }

    $p4link->branchspecs(\@branchspecs);

    $p4link->save_config;

    my $last_change = $p4link->fetch_p4_changes() or die "No changes found\n";

    if ($p4link->git_repo) {
	my $master_branch = @branchspecs ? $branchspecs[0]->[1] : "master";
	$p4link->git_repo->command_noisy("config", "branch.master.p4-remote", $remotename);
	$p4link->git_repo->command_noisy("config", "branch.master.rebase", $master_branch);
	$p4link->git_repo->command_noisy("branch", "master", "refs/remotes/$remotename/$master_branch");
	$p4link->git_repo->command_noisy("checkout") unless ($opts{n});
    }
}
elsif ($subcommand eq 'fetch' || $subcommand eq 'pull') {
    my %opts;
    getopts("o:d:m:nC:B:T:g:", \%opts) or die "Syntax: $0 fetch [-d git-repo] [-o output] [-m max-changes] [-C commits-chkpt-interval] [-B bytes-chkpt-interval] [-T time-chkpt-interval]\n";

    $opts{o} && $subcommand eq 'pull' and die "Cannot specify an output file with 'pull'\n";
    my $p4link = PerforceLink::Git->new(repo_dir => ($opts{d} || '.'), output_file => $opts{o});

    if (!$globalopts{r} && $subcommand eq 'pull') {
	my $current_branch = $p4link->get_current_branch();
	if ($current_branch) {
	    my $branch_remote = $p4link->get_config_optional("branch.$current_branch.p4-remote");
	    if ($branch_remote) {
		$p4link->remotename($branch_remote);
	    }
	}
    }
    elsif ($globalopts{r}) {
	$p4link->remotename($globalopts{r});
    }
    else {
	$p4link->remotename('p4');
    }

    $p4link->load_config;

    $p4link->tag_changelists(1) if ($opts{t});
    $p4link->fast_scan(0) if ($opts{s});
    $p4link->checkpoint_bytes($opts{B}) if (defined($opts{B}));
    $p4link->checkpoint_commits($opts{C}) if (defined($opts{C}));
    $p4link->checkpoint_interval($opts{T}) if (defined($opts{T}));
    $p4link->max_changes($opts{m});
    $p4link->grafts($opts{g});

    if (@ARGV) {
	$p4link->p4base(scalar shift);
	my @branchspecs;
	for (@ARGV) {
	    m{([^:]+)(?::([^:]+))?} or die "Invalid branch spec: $_\n";
	    my($subdir_pattern, $branch_pattern) = ($1, $2);
	    $branch_pattern ||= $subdir_pattern;
	    push @branchspecs, [$subdir_pattern, $branch_pattern];
	}
	$p4link->branchspecs(\@branchspecs);
    }

    my $last_change = $p4link->fetch_p4_changes();

    if ($subcommand eq 'pull') {
	if ($p4link->git_repo->command_oneline("config", "core.bare") eq 'false') {
	    my $current_branch = $p4link->get_current_branch();
	    if (!$current_branch) {
		warn "You don't appear to be on a branch head for merging.\n";
	    }
	    else {
		my $branch_remote = $p4link->get_config_optional("branch.$current_branch.p4-remote");
		if (!$branch_remote) {
		    warn "Branch '$current_branch' does not have a p4-remote configured\n";
		}
		elsif ($branch_remote ne $p4link->remotename) {
		    # Actually, we should decide which remote we are using based on the current branch.
		    warn "Branch '$current_branch' is configured for remote '$branch_remote'\n";
		}
		else {
		    my $rebase_p4branch = $p4link->get_config_optional("branch.$current_branch.rebase");
		    my $merge_p4branch = $p4link->get_config_optional("branch.$current_branch.merge");
		    if ($merge_p4branch) {
			$p4link->git_repo->command_noisy("merge", "refs/remotes/".$p4link->remotename."/$merge_p4branch");
		    }
		    elsif ($rebase_p4branch) {
			$p4link->git_repo->command_noisy("rebase", "refs/remotes/".$p4link->remotename."/$rebase_p4branch");
		    }
		    else {
			warn "Branch '$current_branch' does not have a configuration of which p4 branch to merge or rebase from\n";
		    }
		}
	    }
	}
    }
}
else {
    die "Unknown subcommand: $subcommand\n";
}
