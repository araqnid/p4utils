#!/usr/bin/perl -w

require 5;
use strict;
use warnings;
use utf8;
use PerforceLink qw(:p4);
use Getopt::Std;
use Date::Parse;
use Date::Format;
use Cwd;
use vars qw($opt_c);

getopts('c:') && @ARGV == 0 or die "Syntax: [-c changelist#] $0 > patch-file\n";
my $dir = getcwd;

my @opened_args = ("...");
unshift @opened_args, "-c", $opt_c if ($opt_c);
my @opened = p4_recv("opened", @opened_args);
my $changeno = $opt_c;
if (!$changeno) {
    my %changes = map { ($_, 1) } map { $_->{change} } @opened;
    my @distinct_changes = keys %changes;
    if (@distinct_changes == 1) {
	$changeno = $distinct_changes[0];
    }
    else {
	die "Found open files covering multiple changelists, please specify changelist with -c: ".join(", ", @distinct_changes)."\n";
    }
}

if ($changeno && $changeno ne 'default') {
    my($changeinfo) = p4_recv("change", "-o", $changeno);
    die $changeinfo->data if ($changeinfo->{code} eq 'error');

    print "From $changeno ".time2str("%a %b %d %H:%M:%S %Y", time)."\n";

    my $userid = $changeinfo->{User};
    my($userinfo) = p4_recv("user", "-o", $userid);
    die $userinfo->data if ($userinfo->{code} eq 'error');
    print "From: $userinfo->{FullName} <$userinfo->{Email}>\n";

    my $datestring = $changeinfo->{Date};
    my $date = str2time($datestring);
    print "Date: ".time2str("%a, %d %b %Y %H:%M:%S %z", $date)."\n";

    my($subject, $residual) = split(/\n/, $changeinfo->{Description}, 2);
    $residual =~ s/^\n+//;
    print "Subject: [PATCH] $subject\n\n$residual\n";
    for (my $i = 0; $changeinfo->{"Jobs$i"}; $i++) {
	my $job = $changeinfo->{"Jobs$i"};
	print "Fixes: $job\n";
    }
    print "---\n";
}


for my $opened (@opened) {
    my $location = p4_recv("where", $opened->{clientFile});
    my $filename = $location->{path};
    $filename =~ s{^\Q$dir/}{};

    if ($opened->{action} eq 'edit') {
	my($header, $output) = p4_recv("diff", "-du", $opened->{clientFile});
	print "diff --p4 a/$filename b/$filename\n";
	print "--- a/$filename\n";
	print "+++ b/$filename\n";

	print $output;
    }
    elsif ($opened->{action} eq 'add' || $opened->{action} eq 'branch' || $opened->{action} eq 'integrate') {
	print "diff --p4 a/$filename b/$filename\n";
	print "--- /dev/null\n";
	print "+++ b/$filename\n";

	open(FILE, $location->{path}) or die "Unable to read $location->{path}: $!\n";
	my $lines = 0;
	while (<FILE>) {
	    ++$lines;
	}
	if ($lines == 0) {
	    die "Empty file cannot be put into a patch\n";
	}
	elsif ($lines == 1) {
	    print "\@\@ -0,0 +$lines \@\@\n";
	}
	else {
	    print "\@\@ -0,0 +1,$lines \@\@\n";
	}
	seek(FILE, 0, 0);
	my $has_newline;
	while (<FILE>) {
	    $has_newline = chomp;
	    print "+$_\n";
	}
	close(FILE);
	print "\\ No newline at end of file\n" unless ($has_newline);
    }
    elsif ($opened->{action} eq 'delete') {
	print "diff --p4 a/$filename b/$filename\n";
	print "--- a/$filename\n";
	print "+++ /dev/null\n";

	my($header, @data) = p4_recv('print', $opened->{depotFile});
	my $content = join('', map { $_->{data} } @data);
	my @lines = split(/\n/, $content);
	my $line_count = scalar @lines;
	if ($line_count == 0) {
	    print "Empty file cannot be deleted in a patch\n";
	}
	elsif ($line_count == 1) {
	    print "\@\@ -1 +0,0 \@\@\n";
	}
	else {
	    print "\@\@ -1,$line_count +0,0 \@\@\n";
	}
	for (@lines) {
	    print "-$_\n";
	}
	if ($content !~ /\n$/) {
	    print "\\ No newline at end of file\n";
	}
    }
}
