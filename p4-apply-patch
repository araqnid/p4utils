#!/usr/bin/perl -w

require 5;
use strict;
use warnings;
use utf8;
use PerforceLink qw(:p4);

our $tmpdir = $ENV{TMPDIR} || "/tmp";

sub clean {
    my $text = shift;
    do {
	} while ($text =~ s{\$(Id|Revision|Author|Date|Header|File|DateTime|Change): [^\$,]+ \$}{\$$1\$}g);
    return $text;
}

sub interesting_hunk {
    my @removed_lines;
    my @reinserted_lines;
    for (@_) {
	if (/^-(.+)/) {
	    push @removed_lines, clean($1);
	}
	elsif (@removed_lines) {
	    if (/^\+(.+)/) {
		push @reinserted_lines, clean($1);
	    }
	    else {
		if (@removed_lines != @reinserted_lines) {
		    return 1; # Not same number of lines
		}
		for my $i (0..$#removed_lines) {
		    return 1 if ($reinserted_lines[$i] ne $removed_lines[$i]);
		}
		@removed_lines = ();
		@reinserted_lines = ();
	    }
	}
	elsif (/^\+/) {
	    return 1;
	}
    }
    return 0;
}

sub strip_expansion_hunks($) {
    my $infile = shift;
    my $outfile = sprintf("%s/stripped%X%X%X", $tmpdir, $$, time, rand()*0x10000);
    open(INPUT, $infile) or die "Unable to read $infile: $!\n";
    open(OUTPUT, ">$outfile") or die "Unable to write $outfile: $!\n";
    my @header;
    my @hunk;
    my $state = 'outside';
    while (<INPUT>) {
	my $oldstate = $state;
	if ($state eq 'outside') {
	    if (m|^--- |) {
		$state = 'header';
		@header = ($_);
	    }
	    else {
		print OUTPUT;
	    }
	}
	elsif ($state eq 'header') {
	    if (m|^\@\@|) {
		$state = 'hunk';
		@hunk = ($_);
	    }
	    else {
		push @header, $_;
	    }
	}
	elsif ($state eq 'hunk') {
	    if (m|^\@\@|) {
		if (interesting_hunk(@hunk)) {
		    print OUTPUT @header;
		    print OUTPUT @hunk;
		    @header = ();
		}
		@hunk = ($_);
	    }
	    elsif (m|^---|) {
		if (interesting_hunk(@hunk)) {
		    print OUTPUT @header;
		    print OUTPUT @hunk;
		    @header = ();
		}
		@hunk = ();
		$state = 'header';
	    }
	    elsif (m|^[ +-]|) {
		push @hunk, $_;
	    }
	    else {
		if (interesting_hunk(@hunk)) {
		    print OUTPUT @header;
		    print OUTPUT @hunk;
		    @header = ();
		}
		@hunk = ();
		$state = 'outside';
		print OUTPUT;
	    }
	}
	#print "$oldstate $state : $_\n";
    }

    if ($state eq 'hunk') {
	if (interesting_hunk(@hunk)) {
	    print OUTPUT @header;
	    print OUTPUT @hunk;
	}
    }

    close(INPUT);
    close(OUTPUT);
    rename $outfile, $infile or die "Unable to move $outfile back over $infile: $!\n";
}

$PerforceLink::DEBUG = $ENV{P4LINK_DEBUG};
my @diffs;
my $oldfile;
my $newfile;
my $prevline;
my $diffinfo;
while (<>) {
    chomp;
    if (!$newfile) {
	if (/^--- (.+)/) {
	    $oldfile = $1;
	    $oldfile eq '/dev/null' || $oldfile =~ m{^a/} or die "Expected old file to be a/... or /dev/null: $oldfile\n";
	    if ($prevline && $prevline =~ m{^(integrate|edit|add|branch|delete) (\S+) (//.+)#(\d+)$}) {
		$diffinfo = { action => $1, type => $2, depotFile => $3, rev => $4 };
	    }
	    else {
		undef $diffinfo;
	    }
	}
	elsif ($oldfile) {
	    if (/^\+\+\+ (.+)/) {
		$newfile = $1;
		$newfile eq '/dev/null' || $newfile =~ m{^b/} or die "Expected new file to be b/... or /dev/null: $newfile\n";
		my $tempfile = "$tmpdir/".sprintf("patch%X%X%X", $$, time, rand()*0x10000);
		open(OUTPUT, ">$tempfile") or die "Unable to write $tempfile\n";
		push @diffs, {oldfile => $oldfile, newfile => $newfile, tempfile => $tempfile, extended => $diffinfo};
		print OUTPUT "--- $oldfile\n";
		print OUTPUT "+++ $newfile\n";
	    }
	    else {
		undef $oldfile;
	    }
	}
	$prevline = $_;
    }
    else {
	if (/^[\@ +-]/) {
	    print OUTPUT "$_\n";
	}
	else {
	    close OUTPUT;
	    undef $newfile;
	    undef $oldfile;
	}
    }
}

print "Testing extracted file patches...\n";
for my $diffinfo (@diffs) {
    my $path;
    my $action;
    if ($diffinfo->{oldfile} ne '/dev/null') {
	$path = $diffinfo->{oldfile};
	$path =~ s{^a/}{} or die "Expected old file to be a/... or /dev/null: $diffinfo->{oldfile}\n";
	$action = $diffinfo->{newfile} eq '/dev/null' ? 'delete' : 'edit';
    }
    else {
	$path = $diffinfo->{newfile};
	$path =~ s{^b/}{} or die "Expected new file to be b/... or /dev/null: $diffinfo->{newfile}\n";
	$action = 'add';
    }
    print " Considering $path ($action)\n";
    my($opened) = p4_recv("opened", $path);
    if ($opened) {
	die "Already open: $path\n";
    }
    if ($action eq 'add') {
	my($fileinfo) = p4_recv("files", $path);
	if ($fileinfo->{code} eq 'stat') {
	    if ($fileinfo->{action} ne 'delete' && $fileinfo->{action} ne 'purge') {
		die "Patch would try to create new file on top of existing $fileinfo->{depotFile}#$fileinfo->{rev}\n";
	    }
	}
    }
    elsif ($action eq 'edit') {
	my($fileinfo) = p4_recv("files", $path);
	if ($fileinfo->{code} eq 'stat') {
	    if ($fileinfo->{action} eq 'delete' || $fileinfo->{action} eq 'purge') {
		die "Patch would try to edit deleted $fileinfo->{depotFile}#$fileinfo->{rev}\n";
	    }
	}
	else {
	    die "Patch would try to edit non-existent $path\n";
	}
	if ($fileinfo->{type} =~ /^k[a-z]*text/ || $fileinfo->{type} =~ /^text\+[a-z]*k/) {
	    strip_expansion_hunks($diffinfo->{tempfile});
	}
	$diffinfo->{type} = $fileinfo->{type};
	$ENV{PATCH_GET} = 0; # Tell patch to ignore Perforce if it supports it
	my $exitcode = system("patch", "-s", "--dry-run", "-p1", "-i", $diffinfo->{tempfile});
	if ($exitcode != 0) {
	    die "Patch does not apply: $path\n";
	}
    }
    elsif ($action eq 'delete') {
	my($fileinfo) = p4_recv("files", $path);
	if ($fileinfo->{code} eq 'stat') {
	    if ($fileinfo->{action} eq 'delete' || $fileinfo->{action} eq 'purge') {
		die "Patch would try to delete already-deleted $fileinfo->{depotFile}#$fileinfo->{rev}\n";
	    }
	}
	else {
	    die "Patch would try to delete non-existent $path\n";
	}
	if ($fileinfo->{type} =~ /^k[a-z]*text/ || $fileinfo->{type} =~ /^text\+[a-z]*k/) {
	    strip_expansion_hunks($diffinfo->{tempfile});
	}
	$diffinfo->{type} = $fileinfo->{type};
	$ENV{PATCH_GET} = 0; # Tell patch to ignore Perforce if it supports it
	my $exitcode = system("patch", "-s", "--dry-run", "-p1", "-i", $diffinfo->{tempfile});
	if ($exitcode != 0) {
	    die "Patch does not apply: $path\n";
	}
    }
    else {
	die "$action?";
    }
    $diffinfo->{path} = $path;
    $diffinfo->{action} = $action;
}

print "Performing patch...\n";
for my $diffinfo (@diffs) {
    if ($diffinfo->{action} eq 'add') {
	print " $diffinfo->{path} (add)\n";
	system "patch", "-p1", "-i", $diffinfo->{tempfile};
	if ($diffinfo->{extended}->{type}) {
	    p4_exec("add", "-t", $diffinfo->{extended}->{type}, $diffinfo->{path});
	    if ($diffinfo->{extended}->{type} ne $diffinfo->{type}) {
		print "  set type $diffinfo->{extended}->{type}\n";
	    }
	}
	else {
	    p4_exec("add", $diffinfo->{path});
	}
    }
    elsif ($diffinfo->{action} eq 'edit') {
	print " $diffinfo->{path} (edit)\n";
	if ($diffinfo->{extended}->{type}) {
	    p4_exec("edit", "-t", $diffinfo->{extended}->{type}, $diffinfo->{path});
	    if ($diffinfo->{extended}->{type} ne $diffinfo->{type}) {
		print "  set type $diffinfo->{extended}->{type}\n";
	    }
	}
	else {
	    p4_exec("edit", $diffinfo->{path});
	}
	system "patch", "-p1", "-i", $diffinfo->{tempfile};
    }
    elsif ($diffinfo->{action} eq 'delete') {
	print " $diffinfo->{path} (delete)\n";
	p4_exec("delete", $diffinfo->{path});
    }
    unlink($diffinfo->{tempfile});
}
